--- arch/arm/mach-exynos/cpufreq-4x12.c
+++ arch/arm/mach-exynos/cpufreq-4x12.c
@@ -26,7 +26,7 @@
 #include <plat/clock.h>
 #include <plat/cpu.h>
 
-#define CPUFREQ_LEVEL_END	(L17 + 1)
+#define CPUFREQ_LEVEL_END	(L22 + 1)
 
 #undef PRINT_DIV_VAL
 
@@ -49,24 +49,29 @@ struct cpufreq_clkdiv {
 static unsigned int exynos4x12_volt_table[CPUFREQ_LEVEL_END];
 
 static struct cpufreq_frequency_table exynos4x12_freq_table[] = {
-	{L0, 1800*1000},
-	{L1, 1704*1000},
-	{L2, 1600*1000},
-	{L3, 1500*1000},
-	{L4, 1400*1000},
-	{L5, 1300*1000},
-	{L6, 1200*1000},
-	{L7, 1100*1000},
-	{L8, 1000*1000},
-	{L9, 900*1000},
-	{L10, 800*1000},
-	{L11, 700*1000},
-	{L12, 600*1000},
-	{L13, 500*1000},
-	{L14, 400*1000},
-	{L15, 300*1000},
-	{L16, 200*1000},
-	{L17, 100*1000},
+	{L0, 2160*1000},
+	{L1, 2120*1000},
+	{L2, 2080*1000},
+	{L3, 2000*1000},
+	{L4, 1920*1000},
+	{L5, 1800*1000},
+	{L6, 1704*1000},
+	{L7, 1600*1000},
+	{L8, 1500*1000},
+	{L9, 1400*1000},
+	{L10, 1300*1000},
+	{L11, 1200*1000},
+	{L12, 1100*1000},
+	{L13, 1000*1000},
+	{L14, 900*1000},
+	{L15, 800*1000},
+	{L16, 700*1000},
+	{L17, 600*1000},
+	{L18, 500*1000},
+	{L19, 400*1000},
+	{L20, 300*1000},
+	{L21, 200*1000},
+	{L22, 100*1000},
 	{0, CPUFREQ_TABLE_END},
 };
 
@@ -131,59 +136,74 @@ static unsigned int clkdiv_cpu0_4412[CPUFREQ_LEVEL_END][8] = {
 	 *		DIVATB, DIVPCLK_DBG, DIVAPLL, DIVCORE2 }
 	 */
 
-	/* ARM L0: 1800Mhz */
-	{ 0, 4, 7, 0, 7, 1, 7, 0 },
+	/* ARM L0: 21600Mhz */
+	{ 0, 4, 7, 0, 7, 1, 8, 0 },
+
+	/* ARM L1: 2120Mhz */
+	{ 0, 4, 7, 0, 7, 1, 8, 0 },
 
-	/* ARM L1: 1700Mhz */
+	/* ARM L2: 2080Mhz */
+	{ 0, 4, 7, 0, 7, 1, 8, 0 },
+
+	/* ARM L3: 2000Mhz */
 	{ 0, 4, 7, 0, 7, 1, 7, 0 },
 
-	/* ARM L2: 1600Mhz */
+	/* ARM L4: 1920Mhz */
+	{ 0, 4, 7, 0, 6, 1, 7, 0 },
+
+	/* ARM L5: 1800Mhz */
 	{ 0, 3, 7, 0, 6, 1, 7, 0 },
 
-	/* ARM L3: 1500Mhz */
+	/* ARM L6: 1704Mhz */
 	{ 0, 3, 7, 0, 6, 1, 7, 0 },
 
-	/* ARM L4: 1400Mhz */
+	/* ARM L7: 1600Mhz */
+	{ 0, 3, 7, 0, 6, 1, 7, 0 },
+
+	/* ARM L8: 1500Mhz */
+	{ 0, 3, 7, 0, 6, 1, 7, 0 },
+
+	/* ARM L9: 1400Mhz */
 	{ 0, 3, 7, 0, 6, 1, 6, 0 },
 
-	/* ARM L5: 1300Mhz */
+	/* ARM L10: 1300Mhz */
 	{ 0, 3, 7, 0, 5, 1, 6, 0 },
 
-	/* ARM L6: 1200Mhz */
+	/* ARM L11: 1200Mhz */
 	{ 0, 3, 7, 0, 5, 1, 5, 0 },
 
-	/* ARM L7: 1100MHz */
+	/* ARM L12: 1100MHz */
 	{ 0, 3, 6, 0, 4, 1, 5, 0 },
 
-	/* ARM L8: 1000MHz */
+	/* ARM L13: 1000MHz */
 	{ 0, 2, 5, 0, 4, 1, 4, 0 },
 
-	/* ARM L9: 900MHz */
+	/* ARM L14: 900MHz */
 	{ 0, 2, 5, 0, 3, 1, 4, 0 },
 
-	/* ARM L10: 800MHz */
+	/* ARM L15: 800MHz */
 	{ 0, 2, 5, 0, 3, 1, 3, 0 },
 
-	/* ARM L11: 700MHz */
+	/* ARM L16: 700MHz */
 	{ 0, 2, 4, 0, 3, 1, 3, 0 },
 
-	/* ARM L12: 600MHz */
+	/* ARM L17: 600MHz */
 	{ 0, 2, 4, 0, 3, 1, 2, 0 },
 
-	/* ARM L13: 500MHz */
+	/* ARM L18: 500MHz */
 	{ 0, 2, 4, 0, 3, 1, 2, 0 },
 
-	/* ARM L14: 400MHz */
+	/* ARM L19: 400MHz */
 	{ 0, 2, 4, 0, 3, 1, 1, 0 },
 
-	/* ARM L15: 300MHz */
+	/* ARM L20: 300MHz */
 	{ 0, 2, 4, 0, 2, 1, 1, 0 },
 
-	/* ARM L16: 200MHz */
+	/* ARM L21: 200MHz */
 	{ 0, 1, 3, 0, 1, 1, 1, 0 },
 
-	/* ARM L17: 100MHz */
-	{ 0, 1, 2, 0, 1, 1, 1, 0 },
+	/* ARM L22: 100MHz */
+	{ 0, 1, 3, 0, 1, 1, 1, 0 },
 };
 
 static unsigned int clkdiv_cpu1_4212[CPUFREQ_LEVEL_END][2] = {
@@ -241,123 +261,152 @@ static unsigned int clkdiv_cpu1_4412[CPUFREQ_LEVEL_END][3] = {
 	 * { DIVCOPY, DIVHPM, DIVCORES }
 	 */
 
-	/* ARM L2: 1800MHz */
+	/* ARM L0: 2160MHz */
+	{ 7, 0, 7 },
+
+	/* ARM L1: 2120MHz */
+	{ 7, 0, 7 },
+
+	/* ARM L2: 2080MHz */
 	{ 7, 0, 7 },
 
-	/* ARM L3: 1700MHz */
+	/* ARM L3: 2000MHz */
 	{ 7, 0, 7 },
 
-	/* ARM L4: 1600MHz */
+	/* ARM L4: 1920MHz */
+	{ 7, 0, 7 },
+
+	/* ARM L5: 1800MHz */
+	{ 7, 0, 7 },
+
+	/* ARM L6: 1704MHz */
+	{ 7, 0, 7 },
+
+	/* ARM L7: 1600MHz */
 	{ 6, 0, 7 },
 
-	/* ARM L5: 1500MHz */
+	/* ARM L8: 1500MHz */
 	{ 6, 0, 7 },
 
-	/* ARM L6: 1400MHz */
+	/* ARM L9: 1400MHz */
 	{ 6, 0, 6 },
 
-	/* ARM L7: 1300MHz */
+	/* ARM L10: 1300MHz */
 	{ 5, 0, 6 },
 
-	/* ARM L8: 1200MHz */
+	/* ARM L11: 1200MHz */
 	{ 5, 0, 5 },
 
-	/* ARM L9: 1100MHz */
+	/* ARM L12: 1100MHz */
 	{ 4, 0, 5 },
 
-	/* ARM L10: 1000MHz */
+	/* ARM L13: 1000MHz */
 	{ 4, 0, 4 },
 
-	/* ARM L11: 900MHz */
+	/* ARM L14: 900MHz */
 	{ 3, 0, 4 },
 
-	/* ARM L12: 800MHz */
+	/* ARM L15: 800MHz */
 	{ 3, 0, 3 },
 
-	/* ARM L13: 700MHz */
+	/* ARM L16: 700MHz */
 	{ 3, 0, 3 },
 
-	/* ARM L14: 600MHz */
+	/* ARM L17: 600MHz */
 	{ 3, 0, 2 },
 
-	/* ARM L15: 500MHz */
+	/* ARM L18: 500MHz */
 	{ 3, 0, 2 },
 
-	/* ARM L16: 400MHz */
+	/* ARM L19: 400MHz */
 	{ 3, 0, 1 },
 
-	/* ARM L17: 300MHz */
+	/* ARM L20: 300MHz */
 	{ 3, 0, 1 },
 
-	/* ARM L18: 200MHz */
+	/* ARM L21: 200MHz */
 	{ 3, 0, 0 },
 
-	/* ARM L19: 100MHz */
-	{ 2, 0, 0 },
+	/* ARM L22: 100MHz */
+	{ 3, 0, 0 },
 };
 
 static unsigned int exynos4x12_apll_pms_table[CPUFREQ_LEVEL_END] = {
-	/* APLL FOUT L2: 1800MHz */
-	((300<<16)|(4<<8)|(0x0)),
+	/* APLL FOUT L0: 2160MHz */
+	((270<<16)|(3<<8)|(0x0)),
 
-	/* APLL FOUT L3: 1704MHz */
+	/* APLL FOUT L1: 2120MHz */
+	((265<<16)|(3<<8)|(0x0)),
+
+	/* APLL FOUT L2: 2080MHz */
+	((260<<16)|(3<<8)|(0x0)),
+
+	/* APLL FOUT L3: 2000MHz */
+	((250<<16)|(3<<8)|(0x0)),
+
+	/* APLL FOUT L4: 1920MHz */
+	((240<<16)|(3<<8)|(0x0)),
+
+	/* APLL FOUT L5: 1800MHz */
+	((225<<16)|(3<<8)|(0x0)),
+
+	/* APLL FOUT L6: 1704MHz */
 	((213<<16)|(3<<8)|(0x0)),
 
-	/* APLL FOUT L4: 1600MHz */
+	/* APLL FOUT L7: 1600MHz */
 	((200<<16)|(3<<8)|(0x0)),
 
-	/* APLL FOUT L5: 1500MHz */
+	/* APLL FOUT L8: 1500MHz */
 	((250<<16)|(4<<8)|(0x0)),
 
-	/* APLL FOUT L6: 1400MHz */
+	/* APLL FOUT L9: 1400MHz */
 	((175<<16)|(3<<8)|(0x0)),
 
-	/* APLL FOUT L7: 1300MHz */
+	/* APLL FOUT L10: 1300MHz */
 	((325<<16)|(6<<8)|(0x0)),
 
-	/* APLL FOUT L8: 1200MHz */
+	/* APLL FOUT L11: 1200MHz */
 	((200<<16)|(4<<8)|(0x0)),
 
-	/* APLL FOUT L9: 1100MHz */
+	/* APLL FOUT L12: 1100MHz */
 	((275<<16)|(6<<8)|(0x0)),
 
-	/* APLL FOUT L10: 1000MHz */
+	/* APLL FOUT L13: 1000MHz */
 	((125<<16)|(3<<8)|(0x0)),
 
-	/* APLL FOUT L11: 900MHz */
+	/* APLL FOUT L14: 900MHz */
 	((150<<16)|(4<<8)|(0x0)),
 
-	/* APLL FOUT L12: 800MHz */
+	/* APLL FOUT L15: 800MHz */
 	((100<<16)|(3<<8)|(0x0)),
 
-	/* APLL FOUT L13: 700MHz */
+	/* APLL FOUT L16: 700MHz */
 	((175<<16)|(3<<8)|(0x1)),
 
-	/* APLL FOUT L14: 600MHz */
+	/* APLL FOUT L17: 600MHz */
 	((200<<16)|(4<<8)|(0x1)),
 
-	/* APLL FOUT L15: 500MHz */
+	/* APLL FOUT L18: 500MHz */
 	((125<<16)|(3<<8)|(0x1)),
 
-	/* APLL FOUT L16 400MHz */
+	/* APLL FOUT L19 400MHz */
 	((100<<16)|(3<<8)|(0x1)),
 
-	/* APLL FOUT L17: 300MHz */
+	/* APLL FOUT L20: 300MHz */
 	((200<<16)|(4<<8)|(0x2)),
 
-	/* APLL FOUT L18: 200MHz */
+	/* APLL FOUT L21: 200MHz */
 	((100<<16)|(3<<8)|(0x2)),
 
-	/* APLL FOUT L19: 100MHz */
+	/* APLL FOUT L22: 100MHz */
 	((100<<16)|(3<<8)|(0x2)),
-
 };
 
 /*
  * ASV group voltage table
  */
 
-#define NO_ABB_LIMIT	L10
+#define NO_ABB_LIMIT	L15
 
 static const unsigned int asv_voltage_4212[CPUFREQ_LEVEL_END][13] = {
 	/*   ASV0,    ASV1,    ASV2,    ASV3,	 ASV4,	  ASV5,	   ASV6,    ASV7,    ASV8,    ASV9,   ASV10,   ASV11    ASV12 */
@@ -433,8 +482,13 @@ static const unsigned int asv_voltage_step_12_5[CPUFREQ_LEVEL_END][12] = {
 /* 20120927 DVFS table for pega prime */
 static const unsigned int asv_voltage_step_12_5_rev2[CPUFREQ_LEVEL_END][13] = {
 	/*   ASV0,    ASV1,    ASV2,    ASV3,	 ASV4,	  ASV5,	   ASV6,    ASV7,    ASV8,    ASV9,   ASV10,   ASV11    ASV12 */
-	{ 1400000, 1400000, 1400000, 1400000, 1400000, 1400000,	1400000, 1400000, 1400000, 1400000, 1400000, 1400000, 1400000 }, /* 1800MHz */
-	{ 1400000, 1400000, 1400000, 1400000, 1400000, 1400000,	1400000, 1400000, 1400000, 1387500, 1375000, 1362500, 1350000 }, /* 1700MHz */
+	{ 1500000, 1500000, 1500000, 1500000, 1500000, 1500000, 1500000, 1500000, 1500000, 1500000, 1500000, 1500000, 1500000 }, /* 2160MHz */
+	{ 1500000, 1500000, 1500000, 1500000, 1500000, 1500000, 1500000, 1500000, 1500000, 1500000, 1500000, 1500000, 1500000 }, /* 2120MHz */
+	{ 1475000, 1475000, 1475000, 1475000, 1475000, 1475000, 1475000, 1475000, 1475000, 1475000, 1475000, 1475000, 1475000 }, /* 2080MHz */
+	{ 1450000, 1450000, 1450000, 1450000, 1450000, 1450000, 1450000, 1450000, 1450000, 1450000, 1450000, 1450000, 1450000 }, /* 2000MHz */
+	{ 1400000, 1375000, 1375000, 1375000, 1375000, 1375000, 1375000, 1375000, 1375000, 1375000, 1375000, 1375000, 1375000 }, /* 1920MHz */
+	{ 1375000, 1350000, 1350000, 1350000, 1350000, 1350000, 1350000, 1350000, 1350000, 1350000, 1350000, 1350000, 1350000 }, /* 1800MHz */
+	{ 1350000, 1325000, 1325000, 1325000, 1325000, 1325000, 1325000, 1325000, 1325000, 1325000, 1325000, 1325000, 1325000 }, /* 1704MHz */
 	{ 1312500, 1312500, 1312500, 1312500, 1300000, 1287500, 1275000, 1262500, 1250000, 1237500, 1212500, 1200000, 1187500 },	/* L0 */
 	{ 1312500, 1262500, 1262500, 1262500, 1250000, 1237500,	1225000, 1212500, 1200000, 1187500, 1162500, 1150000, 1137500 },	/* L1 */
 	{ 1275000, 1225000, 1225000, 1225000, 1212500, 1200000, 1187500, 1175000, 1162500, 1150000, 1125000, 1112500, 1100000 },	/* L2 */
@@ -450,7 +504,7 @@ static const unsigned int asv_voltage_step_12_5_rev2[CPUFREQ_LEVEL_END][13] = {
 	{  987500,  937500,  937500,  937500,  925000,  912500,  900000,  887500,  887500,  887500,  875000,  875000,  875000 },	/* L12 */
 	{  975000,  925000,  925000,  925000,  912500,  900000,  887500,  887500,  887500,  887500,  875000,  875000,  875000 },	/* L13 */
 	{  962500,  912500,  912500,  912500,  900000,  887500,  887500,  887500,  887500,  887500,  875000,  875000,  875000 },	/* L14 */
-	{  950000,  900000,  900000,  900000,  900000,  870000,  887500,  887500,  887500,  887500,  875000,  875000,  875000 }, /* 100MHz */
+	{  912500,  900000,  900000,  900000,  900000,  900000,  900000,  887500,  875000,  875000,  862500,  862500,  862500 }, /* 100MHz */
 };
 
 static const unsigned int asv_voltage_step_1ghz[CPUFREQ_LEVEL_END][12] = {
@@ -581,11 +635,11 @@ static void exynos4x12_set_frequency(unsigned int old_index,
 
 		if ((soc_is_exynos4212())
 			&& (exynos_result_of_asv > 3)
-			&& (old_index > L9) && (new_index <= L9)) {
+			&& (old_index > L14) && (new_index <= L14)) { /* 900MHz */
 			exynos4x12_set_abb_member(ABB_ARM, ABB_MODE_130V);
 		} else if ((samsung_rev() >= EXYNOS4412_REV_2_0)
 			&& (exynos_result_of_asv > 2)
-			&& (old_index > L10) && (new_index <= L10)) {
+			&& (old_index > L15) && (new_index <= L15)) { /* 800MHz */
 			exynos4x12_set_abb_member(ABB_ARM, ABB_MODE_130V);
 		}
 
@@ -623,11 +677,11 @@ static void exynos4x12_set_frequency(unsigned int old_index,
 		}
 		if ((soc_is_exynos4212())
 			&& (exynos_result_of_asv > 3)
-			&& (old_index <= L9) && (new_index > L9)) {
+			&& (old_index <= L14) && (new_index > L14)) { /* 900MHz */
 			exynos4x12_set_abb_member(ABB_ARM, ABB_MODE_100V);
 		} else if ((samsung_rev() >= EXYNOS4412_REV_2_0)
 			&& (exynos_result_of_asv > 2)
-			&& (old_index <= L10) && (new_index > L10)) {
+			&& (old_index <= L15) && (new_index > L15)) { /* 800MHz */
 			exynos4x12_set_abb_member(ABB_ARM, ABB_MODE_100V);
 		}
 		if (exynos4x12_volt_table[new_index] < 950000 &&
@@ -638,7 +692,7 @@ static void exynos4x12_set_frequency(unsigned int old_index,
 	/* ABB value is changed in below case */
 	if (soc_is_exynos4412() && (exynos_result_of_asv > 3)
 		&& (samsung_rev() < EXYNOS4412_REV_2_0)) {
-		if (new_index == L17)
+		if (new_index == L22)
 			exynos4x12_set_abb_member(ABB_ARM, ABB_MODE_100V);
 		else
 			exynos4x12_set_abb_member(ABB_ARM, ABB_MODE_130V);
@@ -651,22 +705,22 @@ static unsigned int get_max_cpufreq_idx(void)
 	int index = -EINVAL;
 
 #if defined(CONFIG_EXYNOS4X12_800MHZ_SUPPORT)
-	index = L10;
+	index = L15;
 #elif defined(CONFIG_EXYNOS4X12_400MHZ_SUPPORT)
-	index = L14;
+	index = L19;
 #else
 	if (soc_is_exynos4212()) {
-		index = L3;
+		index = L8; /* 1500MHz */
 	} else if (soc_is_exynos4412()) {
 		/* exynos4x12 prime supports 1.6GHz */
 		if (samsung_rev() >= EXYNOS4412_REV_2_0)
-			index = L0;
+			index = L0; /* 1600MHz */
 		else {
 		/* exynos4x12 supports only 1.4GHz and 1.1GHz */
 			if (exynos_armclk_max != 1400000)
-				index = L8;
+				index = L13; /* 1000MHz */
 			else
-				index = L0;
+				index = L7; /* 1400MHz -> 1600MHz */
 		}
 	}
 #endif
@@ -723,21 +777,21 @@ static void __init set_volt_table(void)
 			switch (tmp) {
 			case 1:
 				if (soc_is_exynos4212())
-					i = L11; 	/* 700MHz fixed volt */
+					i = L16; 	/* 700MHz fixed volt */
 				else
-					i = L13;	/* 500MHz fixed volt */
+					i = L18;	/* 500MHz fixed volt */
 				break;
 			case 2:
 				if (soc_is_exynos4212())
-					i = L10; 	/* 800MHz fixed volt */
+					i = L15; 	/* 800MHz fixed volt */
 				else
-					i = L11; 	/* 700MHz fixed volt */
+					i = L16; 	/* 700MHz fixed volt */
 				break;
 			case 3:
 				if (soc_is_exynos4212())
-					i = L9; 	/* 900MHz fixed volt */
+					i = L14; 	/* 900MHz fixed volt */
 				else
-					i = L10; 	/* 800MHz fixed volt */
+					i = L15; 	/* 800MHz fixed volt */
 				break;
 			default:
 				break;
@@ -766,10 +820,10 @@ static void __init set_volt_table(void)
  */
 #ifdef CONFIG_SLP
 static struct dvfs_qos_info exynos4x12_dma_lat_qos[] = {
-	{ 118,	200000, L16 },
-	{ 40,	500000, L13 },
-	{ 24,	800000, L10 },
-	{ 16,	1000000, L8 },
+	{ 118,	200000, L21 },
+	{ 40,	500000, L18 },
+	{ 24,	800000, L15 },
+	{ 16,	1000000, L13 },
 	{},
 };
 #endif
@@ -857,8 +911,8 @@ int exynos4x12_cpufreq_init(struct exynos_dvfs_info *info)
 
 	info->mpll_freq_khz = rate;
 #ifdef CONFIG_SLP
-	/* S-Boot at 20120406 uses L10 at bootup */
-	info->pm_lock_idx = L10;
+	/* S-Boot at 20120406 uses L15 at bootup */
+	info->pm_lock_idx = L15; /* 800MHz */
 
 	/*
 	 * However, the bootup frequency might get changed anytime.
@@ -877,11 +931,11 @@ int exynos4x12_cpufreq_init(struct exynos_dvfs_info *info)
 #else
 
 #if defined(CONFIG_EXYNOS4X12_800MHZ_SUPPORT)
-	info->pm_lock_idx = L10;
+	info->pm_lock_idx = L15;
 #elif defined(CONFIG_EXYNOS4X12_400MHZ_SUPPORT)
-	info->pm_lock_idx = L14;
+	info->pm_lock_idx = L19;
 #else
-	info->pm_lock_idx = L8;
+	info->pm_lock_idx = L13;
 #endif
 #endif
 	/*
@@ -892,9 +946,9 @@ int exynos4x12_cpufreq_init(struct exynos_dvfs_info *info)
 	 * So, pll_safe_idx set to value based on MPLL clock.(800MHz or 880MHz)
 	 */
 	if (samsung_rev() >= EXYNOS4412_REV_2_0)
-		info->pll_safe_idx = L9;
+		info->pll_safe_idx = L14; /* 900MHz */
 	else
-		info->pll_safe_idx = L10;
+		info->pll_safe_idx = L15; /* 800MHz */
 
 	info->max_support_idx = max_support_idx;
 	info->min_support_idx = min_support_idx;
